/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrainingRegistrationService } from "../trainingRegistration.service";
import { TrainingRegistrationCreateInput } from "./TrainingRegistrationCreateInput";
import { TrainingRegistration } from "./TrainingRegistration";
import { TrainingRegistrationFindManyArgs } from "./TrainingRegistrationFindManyArgs";
import { TrainingRegistrationWhereUniqueInput } from "./TrainingRegistrationWhereUniqueInput";
import { TrainingRegistrationUpdateInput } from "./TrainingRegistrationUpdateInput";

export class TrainingRegistrationControllerBase {
  constructor(protected readonly service: TrainingRegistrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrainingRegistration })
  async createTrainingRegistration(
    @common.Body() data: TrainingRegistrationCreateInput
  ): Promise<TrainingRegistration> {
    return await this.service.createTrainingRegistration({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrainingRegistration] })
  @ApiNestedQuery(TrainingRegistrationFindManyArgs)
  async trainingRegistrations(
    @common.Req() request: Request
  ): Promise<TrainingRegistration[]> {
    const args = plainToClass(TrainingRegistrationFindManyArgs, request.query);
    return this.service.trainingRegistrations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrainingRegistration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trainingRegistration(
    @common.Param() params: TrainingRegistrationWhereUniqueInput
  ): Promise<TrainingRegistration | null> {
    const result = await this.service.trainingRegistration({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrainingRegistration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrainingRegistration(
    @common.Param() params: TrainingRegistrationWhereUniqueInput,
    @common.Body() data: TrainingRegistrationUpdateInput
  ): Promise<TrainingRegistration | null> {
    try {
      return await this.service.updateTrainingRegistration({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrainingRegistration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrainingRegistration(
    @common.Param() params: TrainingRegistrationWhereUniqueInput
  ): Promise<TrainingRegistration | null> {
    try {
      return await this.service.deleteTrainingRegistration({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
