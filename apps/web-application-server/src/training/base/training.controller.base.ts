/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrainingService } from "../training.service";
import { TrainingCreateInput } from "./TrainingCreateInput";
import { Training } from "./Training";
import { TrainingFindManyArgs } from "./TrainingFindManyArgs";
import { TrainingWhereUniqueInput } from "./TrainingWhereUniqueInput";
import { TrainingUpdateInput } from "./TrainingUpdateInput";

export class TrainingControllerBase {
  constructor(protected readonly service: TrainingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Training })
  async createTraining(
    @common.Body() data: TrainingCreateInput
  ): Promise<Training> {
    return await this.service.createTraining({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Training] })
  @ApiNestedQuery(TrainingFindManyArgs)
  async trainings(@common.Req() request: Request): Promise<Training[]> {
    const args = plainToClass(TrainingFindManyArgs, request.query);
    return this.service.trainings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Training })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async training(
    @common.Param() params: TrainingWhereUniqueInput
  ): Promise<Training | null> {
    const result = await this.service.training({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Training })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTraining(
    @common.Param() params: TrainingWhereUniqueInput,
    @common.Body() data: TrainingUpdateInput
  ): Promise<Training | null> {
    try {
      return await this.service.updateTraining({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Training })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTraining(
    @common.Param() params: TrainingWhereUniqueInput
  ): Promise<Training | null> {
    try {
      return await this.service.deleteTraining({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
