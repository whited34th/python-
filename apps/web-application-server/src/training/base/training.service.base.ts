/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Training as PrismaTraining } from "@prisma/client";

export class TrainingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TrainingCountArgs, "select">): Promise<number> {
    return this.prisma.training.count(args);
  }

  async trainings(
    args: Prisma.TrainingFindManyArgs
  ): Promise<PrismaTraining[]> {
    return this.prisma.training.findMany(args);
  }
  async training(
    args: Prisma.TrainingFindUniqueArgs
  ): Promise<PrismaTraining | null> {
    return this.prisma.training.findUnique(args);
  }
  async createTraining(
    args: Prisma.TrainingCreateArgs
  ): Promise<PrismaTraining> {
    return this.prisma.training.create(args);
  }
  async updateTraining(
    args: Prisma.TrainingUpdateArgs
  ): Promise<PrismaTraining> {
    return this.prisma.training.update(args);
  }
  async deleteTraining(
    args: Prisma.TrainingDeleteArgs
  ): Promise<PrismaTraining> {
    return this.prisma.training.delete(args);
  }
}
